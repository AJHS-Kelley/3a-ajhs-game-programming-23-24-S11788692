# DNA Replication Game, Tavion Myers, v0.0a
#Import entire module 
import time, datetime #bring the whole tool box

#import speciftic method from a module 
from random import choice # bring just the tool you need 

dnaBases = ["A", "T", "G", "C"] # Adenine, Thymine, Guanine, Cytosine

def gameintro() -> None:
    print("Hi!!! welcome to the DNA Replication game.")
    print("Your goal in this game is to try to macth the DNA and RNA  ")

def genDNA() -> str: 
    basesGenerated = 0
    basesRequested = int(input)("please enter a positive integer value.\n")
    dnaSequence = "" 

    while basesGenerated < basesRequested:
        dnaSequence += choice(dnaBases)
        basesGenerated +=1
    return dnaSequence

def genRNA(dnaSequence: str) -> tuple:
    print(f"The DNA sequence is {dnaSequence}.\n")
    print()
    print
    rnaStart = time.time()
    RNAsequence input("C", "G", "U", "T")
    rnastop = time.time()
    rnatime = rnaStop - rnaStart
    return(RNAsequence, RNAtime) # Tuple are ordered (index),Unchangeable, and it allows duplicates 

def checksequence(dnaSequence: str, RNAsequence: str) -> bool:
    ismatch = False
    for rnabase, dnaBases in zip(RNAsequence, dnaSequence):
        if eachbase == "U" and dnaSequence != "T":
            ismatch = False
            break 
        elif rnabase == "C" and dnaBases !="G"
        elif T base 
        elif G base
        elif U base 
        else:
            ismatch = True 
    return ismatch
def calcScore(time: float, dnaSequence: str) -> int: 
    score = 0
    if time < 3.0:
        score += 500
    elif time 8.0:
        score += 250 
        


 

print("checksequence DNA, RNA")



    return ismatch 
 print(checksequence(DNA, RNA[0]))


